--Vista para ver el nombre y precio de los productos agregados a los pedidos
CREATE VIEW orders AS
SELECT PP.pdid AS id_pedido, P.nombre, P.precio, p.prid
FROM productos AS P
JOIN pedidosproductos AS PP 
ON pp.prid = p.prid;

--Vista para ver toda la información de los clientes que tienen pedidos
CREATE VIEW clientsOrders AS
SELECT P.pdid AS pdid, C.clid, C.nombres, C.apellidos, C.telefono, C.direccion, C.correo
FROM clientes AS C
JOIN pedidos AS P 
ON C.clid = p.clid;

--Vista para ver Miembros - Servicios y Si el estado del servicio
CREATE VIEW memberServiceState AS
SELECT MS.msid, MS.mbid, MS.svid, S.estado
FROM servicios AS S
JOiN MiembrosServicios AS MS
ON S.svid = MS.svid
GROUP BY MS.svid, S.estado, MS.msid
ORDER BY MS.msid;

--Vista para ver Miembros - Servicios y Si el estado del miembro
CREATE VIEW memberServiceState2 AS
SELECT MS.msid, MS.mbid, MS.svid, S.estado
FROM miembros AS S
JOiN MiembrosServicios AS MS
ON S.mbid = MS.mbid
GROUP BY S.mbid, S.estado, MS.msid
ORDER BY MS.msid;

--Vista para ver informes
CREATE VIEW informs AS
SELECT I.ifid, I.ctsid, C.clid, C.mcid, C.fecha, M.nombres, M.apellidos, I.nota, string_agg(S.nombre, ' ● ') AS servicios
FROM informes AS I
JOIN citas AS C
ON C.ctsid = I.ctsid AND C.estado = 'Atendido'
JOIN miembros AS M
ON M.mbid = I.mbid
JOIN informesServicios AS INF
ON INF.ifid = I.ifid
JOIN servicios AS S
ON INF.svid = S.svid
GROUP BY I.ifid, M.nombres, M.apellidos, C.fecha, C.clid, C.mcid
ORDER BY I.ifid;

--Vista para ver la información de una cita
CREATE VIEW infoQuotes AS
SELECT C.ctsid, C.clid, C.fecha, C.hora , M.nombre, string_agg(S.nombre, ' ● ') AS servicios
FROM citas AS C
JOIN citasServicios AS CS
ON CS.ctsid = C.ctsid AND C.estado = 'Espera'
JOIN servicios AS S
ON CS.svid = S.svid
JOIN mascotas AS M
ON C.mcid = M.mcid
GROUP BY C.ctsid, M.nombre
ORDER BY C.ctsid;

--Vista para ver la información de una cita como administrador
CREATE VIEW adminQuote AS
SELECT C.ctsid, C.clid, C.estado, CL.nombres, CL.apellidos, CL.correo, CL.telefono, CL.direccion, C.fecha, C.hora , M.nombre, M.raza, M.edad, M.sexo, M.condicion, string_agg(S.nombre, ' ● ') AS servicios
FROM citas AS C
JOIN citasServicios AS CS
ON CS.ctsid = C.ctsid AND C.estado = 'Espera'
JOIN servicios AS S
ON CS.svid = S.svid
JOIN mascotas AS M
ON C.mcid = M.mcid
JOIN clientes AS CL
ON C.clid = CL.clid
GROUP BY C.ctsid, M.nombre, CL.nombres, CL.apellidos, CL.correo, CL.telefono, CL.direccion, M.raza, M.edad, M.sexo, M.condicion
ORDER BY C.hora, C.fecha DESC;

--Vista para ver el id del pedido y la suma total a pagar por pedido
CREATE VIEW ordervalue AS
SELECT PD.clid, PD.fecha, PD.pdid AS id_pedido, P.prid AS id_producto, string_agg(P.nombre, ' ● '), SUM(P.precio) AS valor_total_pedido
FROM productos AS P
JOIN pedidosProductos AS PP
ON PP.prid = p.prid
JOIN pedidos AS PD
ON PD.pdid = PP.pdid
GROUP BY id_pedido, PD.clid, id_producto
ORDER BY id_pedido ASC;

--Vista para ver todos los usuarios
CREATE VIEW users AS
SELECT M.mbid AS id, M.usuario, M.contraseña, M.nombres, M.apellidos, M.rol, M.correo
FROM miembros AS M
UNION ALL
SELECT C.clid AS id, C.usuario, C.contraseña, C.nombres, C.apellidos, 'Cliente' AS rol, C.correo
FROM clientes AS C;

--Funcion para ver los productos disponibles
CREATE OR REPLACE FUNCTION function_products_available()
RETURNS TRIGGER AS $function_products_available$	
DECLARE 
	idpro INTEGER = (SELECT prid
					 FROM pedidosProductos AS PP
					 ORDER BY PP.ppid DESC LIMIT 1);
BEGIN
	UPDATE productos AS PR
	SET	cantidad = cantidad - 1
	WHERE PR.prid = idpro;
RETURN NEW;
END
$function_products_available$ LANGUAGE plpgsql;

--Trigger para ver los productos disponibles
CREATE TRIGGER trigger_products_available
AFTER INSERT ON pedidosProductos
FOR EACH ROW 
EXECUTE PROCEDURE function_products_available(); 



